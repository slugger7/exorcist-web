// Code generated by tygo. DO NOT EDIT.
/**
  * GENERATED FILE
  * 
  * DO NOT EDIT
  */
import * as model from "./model.d.ts"
export * from "./enum.d.ts"

//////////
// source: enum.go

export type Enum = any;

//////////
// source: job.go

export interface CreateJobDTO {
  type: model.JobTypeEnum;
  data: ScanPathData | GenerateThumbnailData;
  priority?: JobPriority;
}
export type JobPriority = number /* int16 */;
export const JobPriority_Highest: JobPriority = 0;
export const JobPriority_High: JobPriority = 1;
export const JobPriority_MediumHigh: JobPriority = 2;
export const JobPriority_Medium: JobPriority = 3;
export const JobPriority_MediumLow: JobPriority = 4;
export const JobPriority_Low: JobPriority = 5;
export const JobPriority_Lowest: JobPriority = 6;
export interface JobSearchDTO {
  PageRequestDTO: PageRequestDTO;
  statuses: model.JobStatusEnum;
  parent?: string;
  orderBy: JobOrdinal;
  jobTypes: model.JobTypeEnum;
}
export type JobOrdinal = string;
export const JobOrdinal_Created: JobOrdinal = "created";
export const JobOrdinal_Modified: JobOrdinal = "modified";
export const JobOrdinal_Priority: JobOrdinal = "priority";
export interface JobDTO {
  id: string /* UUID */;
  parent?: string /* UUID */;
  priority?: number /* int16 */;
  jobType?: model.JobTypeEnum;
  status?: model.JobStatusEnum;
  data?: string;
  outcome?: string;
  created?: Date;
  modified?: Date;
}

//////////
// source: job_data.go

export interface ScanPathData {
  libraryPathId: string /* UUID */;
}
export interface GenerateThumbnailData {
  videoId: string /* UUID */;
  path: string;
  /**
   * Optional: If set to 0, timestamp at 25% of video playback will be used
   */
  timestamp: number /* int */;
  /**
   * Optional: If set to 0, video height will be used
   */
  height: number /* int */;
  /**
   * Optional: If set to 0, video widtch will be used
   */
  width: number /* int */;
}
export interface RefreshFields {
  size: boolean;
  checksum: boolean;
}
export interface RefreshMetadata {
  mediaId: string /* UUID */;
  refreshFields?: RefreshFields;
}
export interface RefreshLibraryMetadata {
  libraryId: string /* UUID */;
  batchSize: number /* int */;
  refreshFields?: RefreshFields;
}

//////////
// source: library.go

export interface CreateLibraryDTO {
  name: string;
}
export interface LibraryDTO {
  id?: string /* UUID */;
  name?: string;
  created?: Date;
  modified?: Date;
}
export interface LibraryUpdateDTO {
  name: string;
}

//////////
// source: library_path.go

export interface CreateLibraryPathModelDTO {
  libraryId: string /* UUID */;
  path: string;
}
export interface LibraryPathDTO {
  id?: string /* UUID */;
  libraryId?: string /* UUID */;
  path?: string;
  created: Date;
  modified: Date;
}

//////////
// source: media.go

export type MediaOrdinal = string;
export const MediaOrdinal_Created: MediaOrdinal = "created";
export const MediaOrdinal_Modified: MediaOrdinal = "modified";
export const MediaOrdinal_Path: MediaOrdinal = "path";
export const MediaOrdinal_Title: MediaOrdinal = "title";
export const MediaOrdinal_Size: MediaOrdinal = "size";
export const MediaOrdinal_Added: MediaOrdinal = "added";
export const MediaOrdinal_Runtime: MediaOrdinal = "runtime";
export type WatchStatus = string;
export const WatchStatus_Watched: WatchStatus = "watched";
export const WatchStatus_Unwatched: WatchStatus = "unwatched";
export const WatchStatus_InProgress: WatchStatus = "in_progress";
export interface MediaSearchDTO {
  PageRequestDTO: PageRequestDTO;
  orderBy: MediaOrdinal;
  search: string;
  tags: string[];
  people: string[];
  watchStatus: WatchStatus[];
}
export interface MediaOverviewDTO {
  id: string /* UUID */;
  title?: string;
  thumbnailId?: string /* UUID */;
  progress?: number /* float64 */;
  deleted: boolean;
  runtime: number /* float64 */;
}
export interface MediaDTO {
  id: string /* UUID */;
  libraryPathId: string /* UUID */;
  path: string;
  title: string;
  size: number /* int64 */;
  checksum?: string;
  exists: boolean;
  deleted: boolean;
  added: Date;
  created: Date;
  modified: Date;
  image?: ImageDTO;
  video?: VideoDTO;
  thumbnailId?: string /* UUID */;
  progress: number /* float64 */;
  people: PersonDTO[];
  tags: TagDTO[];
}
export interface ImageDTO {
  id: string /* UUID */;
  mediaId: string /* UUID */;
  height: number /* int32 */;
  width: number /* int32 */;
}
export interface VideoDTO {
  id: string /* UUID */;
  mediaId: string /* UUID */;
  height: number /* int32 */;
  width: number /* int32 */;
  runtime: number /* float64 */;
}
export interface DeleteMediaDTO {
  physical?: boolean;
}
export interface MediaUpdateDTO {
  title?: string;
}
export interface MediaUpdatedDTO {
  id: string /* UUID */;
  title?: string;
  modified: Date;
}

//////////
// source: media_progress.go

export interface ProgressDTO {
  progress: number /* float64 */;
}
export interface ProgressUpdateDTO {
  overwrite: boolean;
  progress: number /* float64 */;
}

//////////
// source: page.go

export interface PageDTO<T extends any> {
  data: T[];
  total: number /* int */;
  limit: number /* int */;
  skip: number /* int */;
}
export interface PageRequestDTO {
  skip: number /* int */;
  limit: number /* int */;
  asc: boolean;
}

//////////
// source: person.go

export type PersonOrdinal = string;
export const PersonOrdinal_MediaCount: PersonOrdinal = "count";
export const PersonOrdinal_Name: PersonOrdinal = "name";
export interface PersonDTO {
  id: string /* UUID */;
  name: string;
  created: Date;
  modified: Date;
}
export interface PersonSearchDTO {
  search: string;
  orderBy: PersonOrdinal;
  asc: boolean;
}
export interface PersonUpdateDTO {
  name: string;
}

//////////
// source: playlist.go

export interface CreatePlaylistDTO {
  name: string;
}
export interface PlaylistDTO {
  id: string /* UUID */;
  name: string;
  created: Date;
  modified: Date;
}
export interface CreatePlaylistMediaDTO {
  mediaId: string /* UUID */;
}
export interface PlaylistUpdateDTO {
  name: string;
}

//////////
// source: reset_password.go

export interface ResetPasswordDTO {
  oldPassword: string;
  newPassword: string;
  repeatPassword: string;
}

//////////
// source: tag.go

export type TagOrdinal = string;
export const TagOrdinal_MediaCount: TagOrdinal = "count";
export const TagOrdinal_Name: TagOrdinal = "name";
export interface TagDTO {
  id: string /* UUID */;
  name: string;
  created: Date;
  modified: Date;
}
export interface TagSearchDTO {
  search: string;
  orderBy: TagOrdinal;
  asc: boolean;
}
export interface TagUpdateDTO {
  name: string;
}

//////////
// source: websocket.go

export type WSTopic = string;
export const WSTopic_JobUpdate: WSTopic = "job_update";
export const WSTopic_JobCreate: WSTopic = "job_create";
export const WSTopic_VideoUpdate: WSTopic = "video_update";
export const WSTopic_VideoCreate: WSTopic = "video_create";
export const WSTopic_VideoDelete: WSTopic = "video_delete";
export interface WSMessage<T extends any> {
  topic: WSTopic;
  data?: T;
}
